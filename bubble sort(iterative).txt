from sys import stdin
import sys
sys.setrecursionlimit(10 ** 8)

#Following is the Node class already written for the Linked List
class Node :
    def __init__(self, data) :
        self.data = data
        self.next = None



        
def reverse2(head):
    if(head == None or head.next == None or k==0) :
        return head,head
    
    newHead,tail = reverse2(head.next)
    tail.next = head
    head.next = None
    
    return newHead,head

def kReverse(head, k):
    if(head == None or head.next == None):
        return head
    
    newHead = head
    temp = head
    count = 1
    while(count<k and temp.next != None) :
        temp = temp.next
        count +=1
    head2 = temp.next
    temp.next = None
    newHead,temp = reverse2(newHead)
    head2 = kReverse(head2, k)
    temp.next = head2
    return newHeadfrom sys import stdin

#Following is the Node class already written for the Linked List
class Node :
    def __init__(self, data) :
        self.data = data
        self.next = None
        
def length(head):
    count = 0
    while head is not None:
        count+=1
        head = head.next
    return(count)


def bubbleSort(head) :
    if(head is None):
        return(head)
    l = length(head)
    newhead = head
    if(l==1):
        return(head)
    for i in range(1,l):
        temp = newhead
        for j in range(l-i):
            if(temp.data>temp.next.data):
                temp.data,temp.next.data = temp.next.data,temp.data
                temp = temp.next
            else:
                temp = temp.next
    return(newhead)































def takeInput() :
    head = None
    tail = None

    datas = list(map(int, stdin.readline().rstrip().split(" ")))

    i = 0
    while (i < len(datas)) and (datas[i] != -1) :
        data = datas[i]
        newNode = Node(data)

        if head is None :
            head = newNode
            tail = newNode

        else :
            tail.next = newNode
            tail = newNode

        i += 1

    return head



def printLinkedList(head) :

    while head is not None :
        print(head.data, end = " ")
        head = head.next

    print()


#main
head = takeInput()
head = bubbleSort(head)
printLinkedList(head)