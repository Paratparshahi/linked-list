from sys import stdin,setrecursionlimit
setrecursionlimit(10**6)

#Following is the Node class already written for the Linked List
class Node :
    def __init__(self, data) :
        self.data = data
        self.next = None



def skipMdeleteN(head, M, N):
    if head is None:
        return head
    if M == 0:
        return None
    temp = head
    prev = None
    cnt = 0
    while temp is not None:
        if(cnt == M):
            break
        cnt += 1
        prev = temp
        temp = temp.next
    cnt = 0
    while temp is not None:
        if(cnt == N):
            break
        cnt += 1
        temp = temp.next
        
    prev.next = skipMdeleteN(temp, M, N)
    return head

























#Taking Input Using Fast I/O
def takeInput() :
    head = None
    tail = None

    datas = list(map(int, stdin.readline().rstrip().split(" ")))

    i = 0
    while (i < len(datas)) and (datas[i] != -1) :
        data = datas[i]
        newNode = Node(data)

        if head is None :
            head = newNode
            tail = newNode

        else :
            tail.next = newNode
            tail = newNode

        i += 1

    return head




def printLinkedList(head) :

    while head is not None :
        print(head.data, end = " ")
        head = head.next

    print()


#main
t = int(stdin.readline().rstrip())

while t > 0 :
    
    head = takeInput()
    m_n = stdin.readline().strip().split(" ")

    m = int(m_n[0])
    n = int(m_n[1])

    newHead = skipMdeleteN(head, m, n)
    printLinkedList(newHead)

    t -= 1