from sys import stdin, setrecursionlimit
setrecursionlimit(10 ** 6)

#Following is the Node class already written for the Linked List
class Node :
    def __init__(self, data) :
        self.data = data
        self.next = None
        
def mergeTwoSortedLinkedLists(head1, head2):

    # Write your code here
    h1=head1
    h2=head2
    if h1 ==None and h2==None:
        return None
    elif h2== None:
        return h1
    elif h1==None:
        return h2
    fh=None
    tail=None
    if h1.data>=h2.data:
        fh=h2
        tail=h2
        h2=h2.next
    else:
        fh=h1
        tail=h1
        h1=h1.next
    while h1!=None and h2!=None:
        if h1.data<=h2.data:
            tail.next=h1
            tail=h1
            h1=h1.next
        else:
            tail.next=h2
            tail=h2
            h2=h2.next
    if h2==None:
        tail.next=h1
    else:
        tail.next=h2
    return fh
 
    

def reachmid(head):
    sp=head
    fp=head
    while fp.next!= None and fp.next.next!= None:
        sp=sp.next
        fp=fp.next.next
    return sp

def mergeSort(head) :
	#Your code goes here
    if head==None:
        return head
    if head.next==None:
        return head
    mid=reachmid(head)
    head2=mid.next
    mid.next=None
    
    head1=head
    h1=mergeSort(head1)
    h2=mergeSort(head2)
    h3=mergeTwoSortedLinkedLists(h1,h2)
    return h3
    
    
    
    
    
    
    
    
      




























#Taking Input Using Fast I/O
def takeInput() :
    head = None
    tail = None

    datas = list(map(int, stdin.readline().rstrip().split(" ")))

    i = 0
    while (i < len(datas)) and (datas[i] != -1) :
        data = datas[i]
        newNode = Node(data)

        if head is None :
            head = newNode
            tail = newNode

        else :
            tail.next = newNode
            tail = newNode

        i += 1

    return head


def printLinkedList(head) :

    while head is not None :
        print(head.data, end = " ")
        head = head.next

    print()


#main
t = int(stdin.readline().rstrip())

while t > 0 :
    
    head = takeInput()

    newHead = mergeSort(head)
    printLinkedList(newHead)

    t -= 1